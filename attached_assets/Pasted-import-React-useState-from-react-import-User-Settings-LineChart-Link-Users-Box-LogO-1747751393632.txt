import React, { useState } from 'react';
import { User, Settings, LineChart, Link, Users, Box, LogOut } from 'lucide-react';

const TikTokAffiliatorBot = () => {
  const [isLoggedIn, setIsLoggedIn] = useState(false);
  const [activeTab, setActiveTab] = useState('setup');
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [botRunning, setBotRunning] = useState(false);
  
  // Configuration state
  const [invitationBase, setInvitationBase] = useState('Promotion product');
  const [totalInvites, setTotalInvites] = useState(300);
  const [invitesPerLink, setInvitesPerLink] = useState(50);
  const [commissionRate, setCommissionRate] = useState(10);
  const [followerRange, setFollowerRange] = useState('500,000-1,000,000 followers');
  const [creatorRegion, setCreatorRegion] = useState('United States');
  const [contentCategory, setContentCategory] = useState('Fashion');
  const [selectedProduct, setSelectedProduct] = useState(null);
  
  const products = [
    { id: 1, name: 'TikTok Shop Seller Account', commission: '12%', image: '/api/placeholder/80/80' },
    { id: 2, name: 'Creator Marketplace Access', commission: '8%', image: '/api/placeholder/80/80' },
    { id: 3, name: 'TikTok Premium Subscription', commission: '15%', image: '/api/placeholder/80/80' }
  ];
  
  const handleLogin = (e) => {
    e.preventDefault();
    // In a real app, validate credentials
    if (username && password) {
      setIsLoggedIn(true);
    }
  };
  
  const handleLogout = () => {
    setIsLoggedIn(false);
    setUsername('');
    setPassword('');
  };
  
  const handleStartBot = () => {
    if (selectedProduct) {
      setBotRunning(true);
    }
  };
  
  const handleStopBot = () => {
    setBotRunning(false);
  };
  
  const loginForm = (
    <div className="flex items-center justify-center min-h-screen bg-gray-100">
      <div className="bg-white p-8 rounded-lg shadow-md w-96">
        <div className="flex items-center justify-center mb-6">
          <div className="mr-2 text-red-500">
            <svg viewBox="0 0 24 24" width="28" height="28" stroke="currentColor" strokeWidth="2" fill="none" strokeLinecap="round" strokeLinejoin="round">
              <circle cx="12" cy="12" r="10"></circle>
              <path d="M8 14s1.5 2 4 2 4-2 4-2"></path>
              <line x1="9" y1="9" x2="9.01" y2="9"></line>
              <line x1="15" y1="9" x2="15.01" y2="9"></line>
            </svg>
          </div>
          <h1 className="text-2xl font-bold text-gray-800">TikTok Affiliator Bot</h1>
        </div>
        <form onSubmit={handleLogin}>
          <div className="mb-4">
            <label className="block text-gray-700 text-sm font-bold mb-2" htmlFor="username">
              Username
            </label>
            <input
              className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
              id="username"
              type="text"
              placeholder="Username"
              value={username}
              onChange={(e) => setUsername(e.target.value)}
            />
          </div>
          <div className="mb-6">
            <label className="block text-gray-700 text-sm font-bold mb-2" htmlFor="password">
              Password
            </label>
            <input
              className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 mb-3 leading-tight focus:outline-none focus:shadow-outline"
              id="password"
              type="password"
              placeholder="******************"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
            />
          </div>
          <div className="flex items-center justify-between">
            <button
              className="bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline w-full"
              type="submit"
            >
              Sign In
            </button>
          </div>
        </form>
      </div>
    </div>
  );
  
  const dashboard = (
    <div className="flex flex-col min-h-screen bg-gray-100">
      {/* Header */}
      <header className="bg-white shadow-sm p-4 border-b">
        <div className="container mx-auto flex justify-between items-center">
          <div className="flex items-center">
            <div className="mr-2 text-red-500">
              <svg viewBox="0 0 24 24" width="24" height="24" stroke="currentColor" strokeWidth="2" fill="none" strokeLinecap="round" strokeLinejoin="round">
                <circle cx="12" cy="12" r="10"></circle>
                <path d="M8 14s1.5 2 4 2 4-2 4-2"></path>
                <line x1="9" y1="9" x2="9.01" y2="9"></line>
                <line x1="15" y1="9" x2="15.01" y2="9"></line>
              </svg>
            </div>
            <h1 className="text-xl font-bold text-gray-800">TikTok Affiliator Bot</h1>
          </div>
          <div className="flex items-center">
            <span className="mr-3 text-sm text-gray-600">{username}</span>
            <button 
              onClick={handleLogout}
              className="flex items-center text-sm text-gray-600 hover:text-red-500"
            >
              <LogOut size={16} className="mr-1" />
              Logout
            </button>
          </div>
        </div>
      </header>
      
      {/* Main content */}
      <div className="container mx-auto flex-grow p-4">
        {/* Tabs */}
        <div className="border-b border-gray-200 mb-6">
          <ul className="flex">
            <li className="mr-1">
              <button
                className={`py-2 px-4 text-sm font-medium ${activeTab === 'setup' ? 'text-red-500 border-b-2 border-red-500' : 'text-gray-500 hover:text-gray-700'}`}
                onClick={() => setActiveTab('setup')}
              >
                Setup
              </button>
            </li>
            <li className="mr-1">
              <button
                className={`py-2 px-4 text-sm font-medium ${activeTab === 'monitor' ? 'text-red-500 border-b-2 border-red-500' : 'text-gray-500 hover:text-gray-700'}`}
                onClick={() => setActiveTab('monitor')}
              >
                Monitor
              </button>
            </li>
            <li className="mr-1">
              <button
                className={`py-2 px-4 text-sm font-medium ${activeTab === 'logs' ? 'text-red-500 border-b-2 border-red-500' : 'text-gray-500 hover:text-gray-700'}`}
                onClick={() => setActiveTab('logs')}
              >
                Logs
              </button>
            </li>
            <li className="mr-1">
              <button
                className={`py-2 px-4 text-sm font-medium ${activeTab === 'configuration' ? 'text-red-500 border-b-2 border-red-500' : 'text-gray-500 hover:text-gray-700'}`}
                onClick={() => setActiveTab('configuration')}
              >
                Configuration
              </button>
            </li>
          </ul>
        </div>
        
        {/* Tab content */}
        {activeTab === 'setup' && (
          <div>
            <div className="bg-white rounded-lg shadow p-6 mb-6">
              <div className="flex items-center mb-4">
                <Link className="mr-2 text-gray-700" size={20} />
                <h2 className="text-lg font-bold">Invitation Link Setup</h2>
              </div>
              <div className="mb-4">
                <label className="block text-gray-700 text-sm font-bold mb-2">
                  Base Name for Invitation Links:
                </label>
                <input
                  className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                  type="text"
                  value={invitationBase}
                  onChange={(e) => setInvitationBase(e.target.value)}
                />
              </div>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                <div>
                  <label className="block text-gray-700 text-sm font-bold mb-2">
                    Total Invites Required:
                  </label>
                  <input
                    className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                    type="number"
                    value={totalInvites}
                    onChange={(e) => setTotalInvites(parseInt(e.target.value))}
                  />
                </div>
                <div>
                  <label className="block text-gray-700 text-sm font-bold mb-2">
                    Invites Per Link (max 50):
                  </label>
                  <input
                    className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                    type="number"
                    max="50"
                    value={invitesPerLink}
                    onChange={(e) => setInvitesPerLink(parseInt(e.target.value))}
                  />
                </div>
              </div>
              <div>
                <label className="block text-gray-700 text-sm font-bold mb-2">
                  Commission Rate (%):
                </label>
                <input
                  className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                  type="number"
                  value={commissionRate}
                  onChange={(e) => setCommissionRate(parseInt(e.target.value))}
                />
              </div>
            </div>
            
            <div className="bg-white rounded-lg shadow p-6 mb-6">
              <div className="flex items-center mb-4">
                <Users className="mr-2 text-gray-700" size={20} />
                <h2 className="text-lg font-bold">Creator Targeting</h2>
              </div>
              <div className="mb-4">
                <label className="block text-gray-700 text-sm font-bold mb-2">
                  Follower Count Range:
                </label>
                <select
                  className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                  value={followerRange}
                  onChange={(e) => setFollowerRange(e.target.value)}
                >
                  <option>1,000-10,000 followers</option>
                  <option>10,000-100,000 followers</option>
                  <option>100,000-500,000 followers</option>
                  <option>500,000-1,000,000 followers</option>
                  <option>1,000,000+ followers</option>
                </select>
              </div>
              <div className="mb-4">
                <label className="block text-gray-700 text-sm font-bold mb-2">
                  Creator Region:
                </label>
                <select
                  className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                  value={creatorRegion}
                  onChange={(e) => setCreatorRegion(e.target.value)}
                >
                  <option>United States</option>
                  <option>Canada</option>
                  <option>United Kingdom</option>
                  <option>Australia</option>
                  <option>Germany</option>
                  <option>France</option>
                  <option>Japan</option>
                  <option>South Korea</option>
                  <option>Global</option>
                </select>
              </div>
              <div>
                <label className="block text-gray-700 text-sm font-bold mb-2">
                  Content Category:
                </label>
                <select
                  className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                  value={contentCategory}
                  onChange={(e) => setContentCategory(e.target.value)}
                >
                  <option>Fashion</option>
                  <option>Beauty</option>
                  <option>Fitness</option>
                  <option>Food</option>
                  <option>Travel</option>
                  <option>Technology</option>
                  <option>Gaming</option>
                  <option>Entertainment</option>
                </select>
              </div>
            </div>
            
            <div className="bg-white rounded-lg shadow p-6 mb-6">
              <div className="flex items-center mb-4">
                <Box className="mr-2 text-gray-700" size={20} />
                <h2 className="text-lg font-bold">Product Selection</h2>
              </div>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                {products.map(product => (
                  <div 
                    key={product.id}
                    onClick={() => setSelectedProduct(product)}
                    className={`border p-4 rounded-lg cursor-pointer transition-all ${selectedProduct?.id === product.id ? 'border-red-500 bg-red-50' : 'border-gray-200 hover:border-red-300'}`}
                  >
                    <div className="flex items-center mb-3">
                      <img src={product.image} alt={product.name} className="w-10 h-10 mr-3" />
                      <h3 className="font-medium">{product.name}</h3>
                    </div>
                    <div className="text-sm text-gray-600">
                      <p>Commission: {product.commission}</p>
                    </div>
                  </div>
                ))}
              </div>
            </div>
            
            <div className="flex justify-end">
              {botRunning ? (
                <button
                  onClick={handleStopBot}
                  className="bg-gray-500 hover:bg-gray-600 text-white font-bold py-2 px-6 rounded focus:outline-none focus:shadow-outline"
                >
                  Stop Bot
                </button>
              ) : (
                <button
                  onClick={handleStartBot}
                  disabled={!selectedProduct}
                  className={`${!selectedProduct ? 'bg-gray-300 cursor-not-allowed' : 'bg-red-500 hover:bg-red-600'} text-white font-bold py-2 px-6 rounded focus:outline-none focus:shadow-outline`}
                >
                  Start Bot
                </button>
              )}
            </div>
          </div>
        )}
        
        {activeTab === 'monitor' && (
          <div className="bg-white rounded-lg shadow p-6">
            <h2 className="text-lg font-bold mb-4">Bot Performance Monitor</h2>
            <div className="mb-6">
              <div className="flex justify-between mb-2">
                <span className="text-sm font-medium text-gray-700">Bot Status:</span>
                <span className={`text-sm font-medium ${botRunning ? 'text-green-500' : 'text-gray-500'}`}>
                  {botRunning ? 'Running' : 'Stopped'}
                </span>
              </div>
              <div className="flex justify-between mb-2">
                <span className="text-sm font-medium text-gray-700">Invites Sent:</span>
                <span className="text-sm text-gray-900">{botRunning ? '78' : '0'}/300</span>
              </div>
              <div className="flex justify-between mb-2">
                <span className="text-sm font-medium text-gray-700">Conversion Rate:</span>
                <span className="text-sm text-gray-900">{botRunning ? '12.8%' : '0%'}</span>
              </div>
              <div className="flex justify-between mb-2">
                <span className="text-sm font-medium text-gray-700">Estimated Earnings:</span>
                <span className="text-sm text-gray-900">${botRunning ? '156.32' : '0.00'}</span>
              </div>
            </div>
            <div className="h-64 w-full bg-gray-50 flex items-center justify-center">
              <div className="text-gray-400">
                <LineChart size={48} className="mx-auto mb-2" />
                <p className="text-sm text-center">Performance chart will appear here</p>
              </div>
            </div>
          </div>
        )}
        
        {activeTab === 'logs' && (
          <div className="bg-white rounded-lg shadow p-6">
            <h2 className="text-lg font-bold mb-4">Activity Logs</h2>
            <div className="border rounded-lg overflow-hidden">
              <table className="min-w-full divide-y divide-gray-200">
                <thead className="bg-gray-50">
                  <tr>
                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Timestamp
                    </th>
                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Action
                    </th>
                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Details
                    </th>
                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Status
                    </th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-gray-200">
                  {botRunning && (
                    <>
                      <tr>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                          2025-05-20 14:32:18
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                          Invitation Sent
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                          @fashion_creator_45 (789K followers)
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap">
                          <span className="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800">
                            Success
                          </span>
                        </td>
                      </tr>
                      <tr>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                          2025-05-20 14:31:52
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                          Invitation Sent
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                          @style_queen (612K followers)
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap">
                          <span className="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800">
                            Success
                          </span>
                        </td>
                      </tr>
                      <tr>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                          2025-05-20 14:30:47
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                          Invitation Sent
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                          @trendyvibes (531K followers)
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap">
                          <span className="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-red-100 text-red-800">
                            Failed
                          </span>
                        </td>
                      </tr>
                    </>
                  )}
                  <tr>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                      2025-05-20 14:30:00
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                      Bot {botRunning ? 'Started' : 'Configuration Updated'}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                      {selectedProduct ? selectedProduct.name : 'Initial setup'}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <span className="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-blue-100 text-blue-800">
                        Info
                      </span>
                    </td>
                  </tr>
                </tbody>
              </table>
            </div>
          </div>
        )}
        
        {activeTab === 'configuration' && (
          <div className="bg-white rounded-lg shadow p-6">
            <h2 className="text-lg font-bold mb-4">Bot Configuration</h2>
            <div className="mb-4">
              <label className="block text-gray-700 text-sm font-bold mb-2">
                Bot Auto-Restart:
              </label>
              <select className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
                <option>Disabled</option>
                <option>Every 12 hours</option>
                <option>Every 24 hours</option>
                <option>When rate limited</option>
              </select>
            </div>
            <div className="mb-4">
              <label className="block text-gray-700 text-sm font-bold mb-2">
                Messaging Mode:
              </label>
              <select className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
                <option>Direct Messages</option>
                <option>Comment Engagement</option>
                <option>Hybrid Approach</option>
              </select>
            </div>
            <div className="mb-4">
              <label className="block text-gray-700 text-sm font-bold mb-2">
                Message Template:
              </label>
              <textarea 
                className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                rows="4"
                defaultValue="Hi there! I loved your content and wanted to invite you to join our TikTok affiliate program. Earn up to 15% commission by promoting our products. Let me know if you're interested!"
              />
            </div>
            <div className="mb-4">
              <label className="block text-gray-700 text-sm font-bold mb-2">
                API Rate Limiting:
              </label>
              <div className="flex items-center">
                <span className="mr-2">Slow</span>
                <input type="range" min="1" max="5" defaultValue="3" className="w-full" />
                <span className="ml-2">Fast</span>
              </div>
              <p className="text-xs text-gray-500 mt-1">Adjust speed to avoid TikTok rate limits</p>
            </div>
            <div className="flex justify-end">
              <button className="bg-red-500 hover:bg-red-600 text-white font-bold py-2 px-6 rounded focus:outline-none focus:shadow-outline">
                Save Configuration
              </button>
            </div>
          </div>
        )}
      </div>
      
      {/* Footer */}
      <footer className="bg-white p-4 border-t">
        <div className="container mx-auto text-center text-gray-500 text-sm">
          <p>TikTok Affiliator Bot v1.0.2 | Status: <span className={botRunning ? 'text-green-500' : 'text-red-500'}>{botRunning ? 'Online' : 'Offline'}</span></p>
        </div>
      </footer>
    </div>
  );

  return isLoggedIn ? dashboard : loginForm;
};

export default TikTokAffiliatorBot;